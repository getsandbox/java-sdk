package com.sandbox.client;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.sandbox.common.models.ActivityMessage;
import org.apache.http.client.HttpClient;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by nickhoughton on 10/07/2015.
 */
public class SandboxClient {

    String apiKey;
    String sandboxBaseUrl;
    Long markedFromTimestamp = null;

    private HttpClient httpclient;
    private ObjectMapper mapper;

    /**
     * Constructs a Sandbox helper aims to simplify the integration with the Sandbox platform,
     * specifically to get access to the activity messages being generated by testing events for the purpose of creating assertions.
     *
     * Base URL is the base URL of your given Sandbox installation,
     * this can be the cloud version https://getsandbox.com,
     * or an appliance http://sandbox.local.
     *
     * API Key is the key provided to your given user in the Sandbox UI,
     * it can be found at https://getsandbox.com/settings/api-access in the cloud version.
     *
     * @param sandboxBaseUrl
     * @param apiKey
     */
    public SandboxClient(String sandboxBaseUrl, String apiKey) {
        this.apiKey = apiKey;
        this.sandboxBaseUrl = sandboxBaseUrl;

        PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        cm.setMaxTotal(5);

        httpclient = HttpClients.custom()
                .setConnectionManager(cm)
                .build();

        mapper = new ObjectMapper();
        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
        mapper.disable(SerializationFeature.WRITE_NULL_MAP_VALUES);
        mapper.disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    }

    // Helper method to save the timestamp to be later used to get messages, allows startTest();... test code...; getMessages()
    public void startTest(){
        markedFromTimestamp = System.currentTimeMillis();
    }

    public List<ActivityMessage> getMessagesFromStart(String... sourceSandboxName){
        if(markedFromTimestamp == null) throw new RuntimeException("getMessagesFromStart called without calling 'startTest()' first.");
        return getMessages(markedFromTimestamp, 50, null, sourceSandboxName);
    }

    public List<ActivityMessage> getMessages(long fromTimestamp, String... sourceSandboxName){
        return getMessages(fromTimestamp, 50, null, sourceSandboxName);
    }

    public List<ActivityMessage> getMessages(long fromTimestamp, int maxResults, String keyword, String... sourceSandboxName){
        if(sourceSandboxName.length == 0) throw new RuntimeException("Can't getMessages without a Sandbox name");
        List<ActivityMessage> activityMessages = new ArrayList();

        try {
            URIBuilder builder = new URIBuilder(sandboxBaseUrl);
            builder.setPath("/api/1/activity/search")
                    .setParameter("fromTimestamp", String.valueOf(fromTimestamp))
                    .setParameter("maxResults", String.valueOf(maxResults))
                    .setParameter("sourceSandboxes", join(sourceSandboxName, ","));

            if(keyword != null) builder.setParameter("keyword", keyword);

            String responseStr = Request.Get(builder.build().toString())
                    .addHeader("API-Key", apiKey)
                    .execute().returnContent().asString();

            List<ActivityMessage> messages = mapper.readValue(responseStr, new TypeReference<List<ActivityMessage>>() {});
            activityMessages.addAll(messages);


        } catch (Exception e) {
            e.printStackTrace();
        }
        return activityMessages;
    }

    public static String join(final Object[] array, String separator) {
        if (array == null) {
            return null;
        }
        if (separator == null) {
            separator = "";
        }

        final int noOfItems = array.length;
        if (noOfItems <= 0) {
            return "";
        }

        final StringBuilder buf = new StringBuilder(noOfItems * 16);

        for (int i = 0; i < array.length; i++) {
            if (i > 0) {
                buf.append(separator);
            }
            if (array[i] != null) {
                buf.append(array[i]);
            }
        }
        return buf.toString();
    }

}
